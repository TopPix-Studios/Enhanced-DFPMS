# Generated by Django 4.2.7 on 2025-09-27 17:19

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import profiling.models
import pyotp
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('geolocations', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('account_id', models.AutoField(help_text='Unique identifier for the account.', primary_key=True, serialize=False)),
                ('username', models.CharField(help_text='Unique username for the account.', max_length=255, unique=True)),
                ('email', models.EmailField(help_text='Email address associated with the account.', max_length=254)),
                ('password', models.CharField(help_text='Secure password for the account.', max_length=255)),
                ('is_verified', models.BooleanField(default=False, help_text='Indicates if the account has been verified.')),
                ('verification_token', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Token used for account verification.')),
                ('join_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time when the account was created.', null=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the account has staff privileges.')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if the account is active.')),
                ('otp_secret', models.CharField(blank=True, default=pyotp.random_base32, help_text='Secret key for generating one-time passwords.', max_length=32, null=True)),
                ('last_login_date', models.DateTimeField(blank=True, help_text='Date and time of the last login.', null=True)),
                ('groups', models.ManyToManyField(help_text='Groups this account belongs to.', related_name='user_accounts', to='auth.group')),
                ('user_permissions', models.ManyToManyField(help_text='Specific permissions for this account.', related_name='user_accounts', to='auth.permission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Affiliation',
            fields=[
                ('aff_id', models.AutoField(help_text='Unique identifier for the affiliation.', primary_key=True, serialize=False, verbose_name='Affiliation ID')),
                ('aff_name', models.CharField(help_text='Name of the affiliation or organization.', max_length=255, verbose_name='Affiliation Name')),
                ('is_verified', models.BooleanField(default=False, help_text='Indicates whether the affiliation has been verified.', verbose_name='Is Verified')),
            ],
            options={
                'verbose_name': 'Affiliation',
                'verbose_name_plural': 'Affiliations',
                'ordering': ['aff_name'],
            },
        ),
        migrations.CreateModel(
            name='BackgroundInformation',
            fields=[
                ('bg_id', models.AutoField(help_text='Unique identifier for the background information entry.', primary_key=True, serialize=False, verbose_name='Background Information ID')),
                ('affiliation', models.ForeignKey(help_text='The affiliation or organization associated with this background information.', on_delete=django.db.models.deletion.CASCADE, to='profiling.affiliation', verbose_name='Affiliation')),
            ],
            options={
                'verbose_name': 'Background Information',
                'verbose_name_plural': 'Background Information',
                'ordering': ['affiliation'],
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('language_id', models.AutoField(help_text='Unique identifier for the language.', primary_key=True, serialize=False, verbose_name='Language ID')),
                ('language', models.CharField(help_text='Name of the language (e.g., English, Spanish, Mandarin).', max_length=255, verbose_name='Language Name')),
            ],
            options={
                'verbose_name': 'Language',
                'verbose_name_plural': 'Languages',
                'ordering': ['language'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('df_id', models.AutoField(help_text='Unique identifier for the profile.', primary_key=True, serialize=False, verbose_name='Profile ID')),
                ('first_name', models.CharField(help_text='The first name of the profile owner.', max_length=255, verbose_name='First Name')),
                ('last_name', models.CharField(help_text='The last name of the profile owner.', max_length=255, verbose_name='Last Name')),
                ('suffix', models.CharField(blank=True, help_text='Suffix for the name (e.g., Jr., Sr., III).', max_length=255, null=True, verbose_name='Suffix')),
                ('middle_name', models.CharField(blank=True, help_text='The middle name of the profile owner.', max_length=255, null=True, verbose_name='Middle Name')),
                ('zip', models.CharField(help_text="ZIP code of the profile owner's address.", max_length=255, verbose_name='ZIP Code')),
                ('house_no', models.CharField(help_text="House number of the profile owner's address.", max_length=255, verbose_name='House Number')),
                ('street', models.CharField(help_text="Street name of the profile owner's address.", max_length=255, verbose_name='Street')),
                ('date_of_birth', models.DateField(blank=True, help_text='The date of birth of the profile owner.', null=True, verbose_name='Date of Birth')),
                ('contact_no', models.CharField(blank=True, help_text='The contact number of the profile owner (e.g., +123456789).', max_length=15, null=True, validators=[profiling.models.validate_phone_number], verbose_name='Contact Number')),
                ('gender', models.CharField(help_text='Gender of the profile owner (e.g., Male, Female, Non-binary).', max_length=255, verbose_name='Gender')),
                ('picture', models.ImageField(blank=True, help_text='Profile picture of the user.', null=True, upload_to='profile/', verbose_name='Profile Picture')),
                ('qoute', models.CharField(blank=True, default='Having people acknowledge your existence is a wonderful thing.', help_text='A favorite quote of the profile owner.', max_length=255, null=True, verbose_name='Quote')),
                ('pronoun', models.CharField(blank=True, default='he/she', help_text='Preferred pronoun of the profile owner (e.g., he/she, they/them).', max_length=20, null=True, verbose_name='Preferred Pronoun')),
                ('is_pwd', models.BooleanField(default=False, help_text='Indicates if the profile owner is a Person with Disability (PWD).', verbose_name='Is PWD')),
                ('is_4ps', models.BooleanField(default=False, help_text='Indicates if the profile owner is a 4Ps beneficiary.', verbose_name='Is 4Ps Beneficiary')),
                ('is_archived', models.BooleanField(default=False, help_text='Mark this profile as archived.', verbose_name='Is Archived')),
                ('account_id', models.ForeignKey(help_text='Account associated with this profile.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Account')),
                ('barangay', models.ForeignKey(help_text='Barangay of the profile owner.', on_delete=django.db.models.deletion.CASCADE, to='geolocations.barangay', verbose_name='Barangay')),
                ('bg_id', models.ForeignKey(help_text='Background information associated with this profile.', null=True, on_delete=django.db.models.deletion.CASCADE, to='profiling.backgroundinformation', verbose_name='Background Information')),
                ('city', models.ForeignKey(help_text='City of the profile owner.', on_delete=django.db.models.deletion.CASCADE, to='geolocations.city', verbose_name='City')),
                ('province', models.ForeignKey(help_text='Province of the profile owner.', on_delete=django.db.models.deletion.CASCADE, to='geolocations.province', verbose_name='Province')),
                ('region', models.ForeignKey(help_text='Region of the profile owner.', on_delete=django.db.models.deletion.CASCADE, to='geolocations.region', verbose_name='Region')),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of the project.', max_length=255, verbose_name='Project Title')),
                ('description', models.TextField(help_text='A detailed description of the project.', verbose_name='Project Description')),
                ('pdf_file', models.FileField(help_text='Upload the project file in PDF format.', upload_to='projects/', verbose_name='Project File (PDF)')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the project was created.', verbose_name='Created At')),
                ('profile', models.ForeignKey(help_text='The profile associated with this project.', null=True, on_delete=django.db.models.deletion.CASCADE, to='profiling.profile', verbose_name='Profile')),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('role', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('specialization_id', models.AutoField(help_text='Unique identifier for the specialization.', primary_key=True, serialize=False, verbose_name='Specialization ID')),
                ('specialization', models.CharField(help_text='Name of the specialization (e.g., Web Development, Data Science).', max_length=255, verbose_name='Specialization Name')),
                ('description', models.CharField(help_text='Brief description of the specialization.', max_length=255, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Specialization',
                'verbose_name_plural': 'Specializations',
                'ordering': ['specialization'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the tag (e.g., Technology, Design, Business).', max_length=255, unique=True, verbose_name='Tag Name')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Skills',
            fields=[
                ('skill_id', models.AutoField(help_text='Unique identifier for the skill.', primary_key=True, serialize=False, verbose_name='Skill ID')),
                ('skill', models.CharField(help_text='Name of the skill (e.g., Python Development, SEO Optimization).', max_length=255, verbose_name='Skill Name')),
                ('description', models.CharField(default='Customizing themes, managing extensions, and optimizing e-commerce websites for performance and usability.', help_text='A brief description of the skill.', max_length=255, null=True, verbose_name='Skill Description')),
                ('tags', models.ManyToManyField(help_text='Tags associated with this skill for better categorization.', to='profiling.tag', verbose_name='Related Tags')),
            ],
            options={
                'verbose_name': 'Skill',
                'verbose_name_plural': 'Skills',
                'ordering': ['skill'],
            },
        ),
        migrations.CreateModel(
            name='Resume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resume_file', models.FileField(help_text='Upload the resume file (PDF, DOCX, etc.).', upload_to='resumes/', verbose_name='Resume File')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the resume was uploaded.', verbose_name='Uploaded At')),
                ('profile', models.ForeignKey(help_text='The profile associated with this resume.', null=True, on_delete=django.db.models.deletion.CASCADE, to='profiling.profile', verbose_name='Profile')),
            ],
            options={
                'verbose_name': 'Resume',
                'verbose_name_plural': 'Resumes',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='PastExperience',
            fields=[
                ('past_exp_id', models.AutoField(help_text='Unique identifier for the past experience entry.', primary_key=True, serialize=False, verbose_name='Past Experience ID')),
                ('client', models.CharField(help_text='Name of the client or company associated with this past experience.', max_length=255, null=True, verbose_name='Client')),
                ('year', models.DateField(help_text='The year the experience occurred.', null=True, verbose_name='Year')),
                ('country', models.ForeignKey(help_text='Country where the past experience took place.', null=True, on_delete=django.db.models.deletion.CASCADE, to='geolocations.country', verbose_name='Country')),
            ],
            options={
                'verbose_name': 'Past Experience',
                'verbose_name_plural': 'Past Experiences',
                'ordering': ['-year'],
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('access', 'Access')], help_text='The type of action logged (e.g., Create, Update, Delete, Access).', max_length=10, verbose_name='Action')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='The date and time when the action was logged.', verbose_name='Timestamp')),
                ('url', models.CharField(blank=True, help_text='The URL associated with the logged action.', max_length=255, null=True, verbose_name='URL')),
                ('view_name', models.CharField(blank=True, help_text='The name of the Django view accessed, if applicable.', max_length=255, null=True, verbose_name='View Name')),
                ('object_id', models.CharField(blank=True, help_text='The ID of the object associated with the action (if any).', max_length=255, null=True, verbose_name='Object ID')),
                ('message', models.TextField(help_text='Additional details or context about the action.', verbose_name='Message')),
                ('content_type', models.ForeignKey(blank=True, help_text='The type of content associated with the action (if any).', null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Content Type')),
                ('user', models.ForeignKey(blank=True, help_text='The user who performed the action. Null if anonymous.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Log Entry',
                'verbose_name_plural': 'Log Entries',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate_title', models.CharField(help_text='The title of the certificate.', max_length=255, verbose_name='Certificate Title')),
                ('description', models.TextField(blank=True, help_text='An optional description of the certificate.', null=True, verbose_name='Description')),
                ('issued_by', models.CharField(blank=True, help_text='The organization or authority that issued the certificate.', max_length=255, null=True, verbose_name='Issued By')),
                ('date_issued', models.DateField(blank=True, help_text='The date the certificate was issued.', null=True, verbose_name='Date Issued')),
                ('image_file', models.ImageField(help_text='An optional image of the certificate.', upload_to='certificates/', verbose_name='Certificate Image')),
                ('category', models.CharField(choices=[('Customer Acquisition Specialist', 'Customer Acquisition Specialist'), ('Analytics & Data Specialist', 'Analytics & Data Specialist'), ('Optimization & Testing Specialist', 'Optimization & Testing Specialist'), ('Search Marketing Specialist', 'Search Marketing Specialist'), ('Email Marketing Specialist', 'Email Marketing Specialist'), ('Others', 'Others')], default='Others', help_text='The category of the certificate.', max_length=255, verbose_name='Category')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the certificate was added.', verbose_name='Created At')),
                ('profile', models.ForeignKey(help_text='The profile associated with this certificate.', null=True, on_delete=django.db.models.deletion.CASCADE, to='profiling.profile', verbose_name='Profile')),
            ],
            options={
                'verbose_name': 'Certificate',
                'verbose_name_plural': 'Certificates',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BackgroundInformationLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proficiency_level', models.CharField(choices=[('basic', 'Basic: Minimal understanding and communication'), ('conversational', 'Conversational: Can hold basic conversations'), ('fluent', 'Fluent: Comfortable in most situations'), ('native', 'Native: Complete mastery of the language')], default='basic', help_text='Level of proficiency in the selected language.', max_length=15, verbose_name='Proficiency Level')),
                ('background_information', models.ForeignKey(help_text='The background information associated with this language proficiency.', on_delete=django.db.models.deletion.CASCADE, to='profiling.backgroundinformation', verbose_name='Background Information')),
                ('language', models.ForeignKey(help_text='The language for which proficiency is specified.', on_delete=django.db.models.deletion.CASCADE, to='profiling.language', verbose_name='Language')),
            ],
            options={
                'verbose_name': 'Background Information Language',
                'verbose_name_plural': 'Background Information Languages',
                'ordering': ['language'],
            },
        ),
        migrations.AddField(
            model_name='backgroundinformation',
            name='language',
            field=models.ManyToManyField(help_text='Languages and their proficiency levels associated with this background information.', through='profiling.BackgroundInformationLanguage', to='profiling.language', verbose_name='Languages'),
        ),
        migrations.AddField(
            model_name='backgroundinformation',
            name='past_experiences',
            field=models.ManyToManyField(help_text='Past experiences associated with this background information.', to='profiling.pastexperience', verbose_name='Past Experiences'),
        ),
        migrations.AddField(
            model_name='backgroundinformation',
            name='skills',
            field=models.ManyToManyField(help_text='Skills associated with this background information.', to='profiling.skills', verbose_name='Skills'),
        ),
        migrations.AddField(
            model_name='backgroundinformation',
            name='specialization',
            field=models.ForeignKey(help_text='The specialization associated with this background information.', on_delete=django.db.models.deletion.CASCADE, related_name='background_information_specializations', to='profiling.specialization', verbose_name='Specialization'),
        ),
        migrations.CreateModel(
            name='ProjectTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project', models.ForeignKey(help_text='The project associated with this tag.', on_delete=django.db.models.deletion.CASCADE, to='profiling.project', verbose_name='Project')),
                ('tag', models.ForeignKey(help_text='The tag associated with this project.', on_delete=django.db.models.deletion.CASCADE, to='profiling.tag', verbose_name='Tag')),
            ],
            options={
                'verbose_name': 'Project Tag',
                'verbose_name_plural': 'Project Tags',
                'unique_together': {('project', 'tag')},
            },
        ),
    ]
