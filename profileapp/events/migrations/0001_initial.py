# Generated by Django 4.2.7 on 2025-09-28 11:32

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('profiling', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the location (e.g., City, Park, or Landmark).', max_length=255, verbose_name='Location Name')),
                ('latitude', models.FloatField(blank=True, default=6.1164, help_text='Latitude coordinate of the location.', null=True, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, default=125.1716, help_text='Longitude coordinate of the location.', null=True, verbose_name='Longitude')),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='VirtualDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(blank=True, help_text='The platform used for the virtual event (e.g., Zoom, Google Meet).', max_length=255, null=True, verbose_name='Platform')),
                ('url', models.URLField(blank=True, help_text='The URL link to join the virtual event.', null=True, verbose_name='Meeting URL')),
                ('details', models.CharField(blank=True, help_text='Optional additional details about the virtual event.', max_length=255, null=True, verbose_name='Additional Details')),
            ],
            options={
                'verbose_name': 'Virtual Details',
                'verbose_name_plural': 'Virtual Details',
                'ordering': ['platform'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of the event.', max_length=255, verbose_name='Title')),
                ('description', models.TextField(help_text='A detailed description of the event.', verbose_name='Description')),
                ('start_datetime', models.DateTimeField(help_text='The start date and time of the event.', verbose_name='Start Date and Time')),
                ('end_datetime', models.DateTimeField(help_text='The end date and time of the event.', verbose_name='End Date and Time')),
                ('location_type', models.CharField(choices=[('physical', 'Physical'), ('virtual', 'Virtual'), ('both', 'Both')], default='physical', help_text='Indicates if the event is physical, virtual, or both.', max_length=10, verbose_name='Location Type')),
                ('organizer', models.CharField(help_text='The organizer of the event.', max_length=255, verbose_name='Organizer')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the event was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the event was last updated.', verbose_name='Updated At')),
                ('is_published', models.BooleanField(default=False, help_text='Indicates if the event is published.', verbose_name='Is Published')),
                ('is_cancelled', models.BooleanField(default=False, help_text='Indicates if the event is cancelled.', verbose_name='Is Cancelled')),
                ('is_moved', models.BooleanField(default=False, help_text='Indicates if the event has been moved.', verbose_name='Is Moved')),
                ('remarks', models.TextField(blank=True, help_text='Additional remarks about the event.', null=True, verbose_name='Remarks')),
                ('image', models.ImageField(blank=True, help_text='Optional image representing the event.', null=True, upload_to='events/', verbose_name='Event Image')),
                ('qr_code', models.ImageField(blank=True, help_text='QR code for the event URL.', null=True, upload_to='events/qr_codes/', verbose_name='QR Code')),
                ('location', models.ForeignKey(blank=True, help_text='The physical location of the event.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.location', verbose_name='Location')),
                ('tags', models.ManyToManyField(help_text='Skills or categories associated with the event.', related_name='events', to='profiling.skills', verbose_name='Tags')),
                ('virtual_details', models.ForeignKey(blank=True, help_text='Details for joining the virtual event.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.virtualdetails', verbose_name='Virtual Details')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the attendee.', max_length=255, verbose_name='Attendee Name')),
                ('date', models.DateField(default=django.utils.timezone.now, help_text='The date the attendee was recorded.', verbose_name='Attendance Date')),
                ('logged_in', models.BooleanField(default=False, help_text='Indicates if the attendee logged in using an account.', verbose_name='Logged In')),
                ('age_range', models.CharField(choices=[('A', '20 below'), ('B', '20-29'), ('C', '30-39'), ('D', '40-49'), ('E', '50+')], default=None, help_text='The age range of the attendee.', max_length=7, null=True, verbose_name='Age Range')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], default=None, help_text='The gender of the attendee.', max_length=6, null=True, verbose_name='Gender')),
                ('pwd', models.BooleanField(default=False, help_text='Indicates if the attendee is a Person with Disability (PWD).', verbose_name='Person with Disability (PWD)')),
                ('four_ps', models.BooleanField(default=False, help_text='Indicates if the attendee is a 4Ps beneficiary.', verbose_name='4Ps Beneficiary')),
                ('affiliation', models.CharField(blank=True, help_text='The affiliation or organization of the attendee.', max_length=255, null=True, verbose_name='Affiliation')),
                ('contact', models.CharField(blank=True, help_text='The contact number of the attendee.', max_length=20, null=True, verbose_name='Contact Number')),
                ('email', models.EmailField(blank=True, help_text='The email address of the attendee.', max_length=254, null=True, verbose_name='Email')),
                ('event', models.ForeignKey(help_text='The event for which attendance is recorded.', on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='events.event', verbose_name='Event')),
                ('user', models.ForeignKey(blank=True, help_text='The user associated with this attendance (if logged in).', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Attendance',
                'verbose_name_plural': 'Attendances',
                'ordering': ['-date', 'event'],
            },
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of the announcement.', max_length=255, verbose_name='Title')),
                ('content', models.TextField(help_text='The content or details of the announcement.', verbose_name='Content')),
                ('address', models.TextField(blank=True, default='General Santos City', help_text='Address related to the announcement. Leave blank if no specific location is needed.', null=True, verbose_name='Address')),
                ('latitude', models.FloatField(blank=True, default=6.1164, help_text="Latitude of the announcement's location. Defaults to General Santos City.", null=True, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, default=125.1716, help_text="Longitude of the announcement's location. Defaults to General Santos City.", null=True, verbose_name='Longitude')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the announcement was created.', verbose_name='Created At')),
                ('image', models.ImageField(blank=True, help_text='Optional image related to the announcement.', null=True, upload_to='announcements/', verbose_name='Image')),
                ('author', models.ForeignKey(help_text='The user who created the announcement.', on_delete=django.db.models.deletion.CASCADE, related_name='announcements', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('tags', models.ManyToManyField(help_text='Skills or categories associated with the announcement.', related_name='announcements', to='profiling.skills', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Announcement',
                'verbose_name_plural': 'Announcements',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RSVP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('interested', 'Interested'), ('attending', 'Attending'), ('not_attending', 'Not Attending')], default='interested', help_text='The RSVP status of the user for this event.', max_length=15, verbose_name='RSVP Status')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='The date and time when the RSVP was made.', verbose_name='Timestamp')),
                ('event', models.ForeignKey(help_text='The event the user is responding to.', on_delete=django.db.models.deletion.CASCADE, related_name='rsvps', to='events.event', verbose_name='Event')),
                ('user', models.ForeignKey(help_text='The user responding to the event.', on_delete=django.db.models.deletion.CASCADE, related_name='rsvps', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'RSVP',
                'verbose_name_plural': 'RSVPs',
                'ordering': ['-timestamp'],
                'unique_together': {('user', 'event')},
            },
        ),
    ]
