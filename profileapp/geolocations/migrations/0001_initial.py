# Generated by Django 4.2.7 on 2025-09-27 17:19

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('country_id', models.AutoField(help_text='Unique identifier for the country.', primary_key=True, serialize=False, verbose_name='Country ID')),
                ('country', models.CharField(help_text='The name of the country.', max_length=255, verbose_name='Country Name')),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
                'ordering': ['country'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('region_id', models.AutoField(help_text='Unique identifier for the region.', primary_key=True, serialize=False, verbose_name='Region ID')),
                ('region', models.CharField(help_text='The name of the region.', max_length=255, verbose_name='Region Name')),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 'Regions',
                'ordering': ['region'],
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('province_id', models.AutoField(help_text='Unique identifier for the province.', primary_key=True, serialize=False, verbose_name='Province ID')),
                ('province', models.CharField(help_text='The name of the province.', max_length=255, verbose_name='Province Name')),
                ('region', models.ForeignKey(help_text='The region associated with this province.', on_delete=django.db.models.deletion.CASCADE, to='geolocations.region', verbose_name='Region')),
            ],
            options={
                'verbose_name': 'Province',
                'verbose_name_plural': 'Provinces',
                'ordering': ['province'],
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('city_id', models.AutoField(help_text='Unique identifier for the city.', primary_key=True, serialize=False, verbose_name='City ID')),
                ('city', models.CharField(help_text='The name of the city.', max_length=255, verbose_name='City Name')),
                ('province', models.ForeignKey(help_text='The province associated with this city.', on_delete=django.db.models.deletion.CASCADE, to='geolocations.province', verbose_name='Province')),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
                'ordering': ['city'],
            },
        ),
        migrations.CreateModel(
            name='Barangay',
            fields=[
                ('barangay_id', models.AutoField(help_text='Unique identifier for the barangay.', primary_key=True, serialize=False, verbose_name='Barangay ID')),
                ('barangay', models.CharField(help_text='The name of the barangay.', max_length=255, verbose_name='Barangay Name')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, help_text='Latitude coordinate of the barangay.', max_digits=9, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, help_text='Longitude coordinate of the barangay.', max_digits=9, null=True, verbose_name='Longitude')),
                ('fun_fact', models.CharField(blank=True, default='Fun Fact', help_text='A fun fact about the barangay.', max_length=255, null=True, verbose_name='Fun Fact')),
                ('city', models.ForeignKey(help_text='The city associated with this barangay.', on_delete=django.db.models.deletion.CASCADE, to='geolocations.city', verbose_name='City')),
            ],
            options={
                'verbose_name': 'Barangay',
                'verbose_name_plural': 'Barangays',
                'ordering': ['barangay'],
            },
        ),
    ]
